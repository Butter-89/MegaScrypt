//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MegaScrypt.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MegaScryptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, True=7, False=8, Null=9, 
		Var=10, Equals=11, Underscore=12, Plus=13, Minus=14, Multiply=15, Divide=16, 
		Mod=17, LeftParenthesis=18, RightParenthesis=19, Dot=20, Comma=21, Exclamation=22, 
		Colon=23, Smaller=24, Greater=25, SmallerEql=26, GreaterEql=27, DoubleAmp=28, 
		DoubleVertical=29, DoubleEquals=30, NotEquals=31, DoublePlus=32, DoubleMinus=33, 
		PlusEql=34, MinusEql=35, TimesEql=36, DivideEql=37, Id=38, Number=39, 
		String=40, Whitespace=41, LineComment=42, BlockComment=43;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_assignment = 3, 
		RULE_invocation = 4, RULE_paramList = 5, RULE_instantiation = 6, RULE_keyValuePairs = 7, 
		RULE_keyValuePair = 8, RULE_compoundIdentifier = 9, RULE_block = 10, RULE_elseStmt = 11, 
		RULE_ifStmt = 12, RULE_increment = 13, RULE_decrement = 14, RULE_expression = 15;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "assignment", "invocation", "paramList", 
		"instantiation", "keyValuePairs", "keyValuePair", "compoundIdentifier", 
		"block", "elseStmt", "ifStmt", "increment", "decrement", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'else'", "'if'", "'else if'", "'true'", "'false'", 
		"'null'", "'var'", "'='", "'_'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", 
		"')'", "'.'", "','", "'!'", "':'", "'<'", "'>'", "'<='", "'>='", "'&&'", 
		"'||'", "'=='", "'!='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "True", "False", "Null", "Var", 
		"Equals", "Underscore", "Plus", "Minus", "Multiply", "Divide", "Mod", 
		"LeftParenthesis", "RightParenthesis", "Dot", "Comma", "Exclamation", 
		"Colon", "Smaller", "Greater", "SmallerEql", "GreaterEql", "DoubleAmp", 
		"DoubleVertical", "DoubleEquals", "NotEquals", "DoublePlus", "DoubleMinus", 
		"PlusEql", "MinusEql", "TimesEql", "DivideEql", "Id", "Number", "String", 
		"Whitespace", "LineComment", "BlockComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MegaScrypt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MegaScryptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MegaScryptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MegaScryptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << Var) | (1L << DoublePlus) | (1L << DoubleMinus) | (1L << Id))) != 0)) {
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 32; statement();
					}
					break;
				case 2:
					{
					State = 33; block();
					}
					break;
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		public InstantiationContext instantiation() {
			return GetRuleContext<InstantiationContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case DoublePlus:
			case DoubleMinus:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 39; declaration();
					}
					break;
				case 2:
					{
					State = 40; assignment();
					}
					break;
				case 3:
					{
					State = 41; increment();
					}
					break;
				case 4:
					{
					State = 42; decrement();
					}
					break;
				case 5:
					{
					State = 43; instantiation();
					}
					break;
				case 6:
					{
					State = 44; invocation();
					}
					break;
				}
				State = 47; Match(T__0);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; ifStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Equals() { return GetToken(MegaScryptParser.Equals, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundIdentifierContext compoundIdentifier() {
			return GetRuleContext<CompoundIdentifierContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(Var);
			State = 53; Match(Id);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 54; Match(Equals);
				State = 57;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 55; expression(0);
					}
					break;
				case 2:
					{
					State = 56; compoundIdentifier();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Equals() { return GetToken(MegaScryptParser.Equals, 0); }
		public ITerminalNode PlusEql() { return GetToken(MegaScryptParser.PlusEql, 0); }
		public ITerminalNode MinusEql() { return GetToken(MegaScryptParser.MinusEql, 0); }
		public ITerminalNode TimesEql() { return GetToken(MegaScryptParser.TimesEql, 0); }
		public ITerminalNode DivideEql() { return GetToken(MegaScryptParser.DivideEql, 0); }
		public CompoundIdentifierContext compoundIdentifier() {
			return GetRuleContext<CompoundIdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(Id);
			State = 62;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals) | (1L << PlusEql) | (1L << MinusEql) | (1L << TimesEql) | (1L << DivideEql))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 63; compoundIdentifier();
				}
				break;
			case 2:
				{
				State = 64; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 8, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(Id);
			State = 68; Match(LeftParenthesis);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << True) | (1L << False) | (1L << Null) | (1L << Minus) | (1L << Exclamation) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 69; paramList();
				}
			}

			State = 72; Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(MegaScryptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(MegaScryptParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 10, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; expression(0);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 75; Match(Comma);
				State = 76; expression(0);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstantiationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public KeyValuePairsContext keyValuePairs() {
			return GetRuleContext<KeyValuePairsContext>(0);
		}
		public InstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstantiationContext instantiation() {
		InstantiationContext _localctx = new InstantiationContext(Context, State);
		EnterRule(_localctx, 12, RULE_instantiation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(Var);
			State = 83; Match(Id);
			State = 84; Match(T__1);
			State = 85; keyValuePairs();
			State = 86; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairsContext : ParserRuleContext {
		public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(MegaScryptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(MegaScryptParser.Comma, i);
		}
		public KeyValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePairs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairsContext keyValuePairs() {
		KeyValuePairsContext _localctx = new KeyValuePairsContext(Context, State);
		EnterRule(_localctx, 14, RULE_keyValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; keyValuePair();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 89; Match(Comma);
				State = 90; keyValuePair();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Colon() { return GetToken(MegaScryptParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 16, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(Id);
			State = 97; Match(Colon);
			State = 98; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundIdentifierContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(MegaScryptParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(MegaScryptParser.Id, i);
		}
		public ITerminalNode[] Dot() { return GetTokens(MegaScryptParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(MegaScryptParser.Dot, i);
		}
		public CompoundIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundIdentifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundIdentifierContext compoundIdentifier() {
		CompoundIdentifierContext _localctx = new CompoundIdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(Id);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 101; Match(Dot);
				State = 102; Match(Id);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(T__1);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << Var) | (1L << DoublePlus) | (1L << DoubleMinus) | (1L << Id))) != 0)) {
					{
					{
					State = 109; statement();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 115; Match(T__2);
				}
				break;
			case T__4:
			case Var:
			case DoublePlus:
			case DoubleMinus:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(T__3);
			State = 120; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode[] LeftParenthesis() { return GetTokens(MegaScryptParser.LeftParenthesis); }
		public ITerminalNode LeftParenthesis(int i) {
			return GetToken(MegaScryptParser.LeftParenthesis, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RightParenthesis() { return GetTokens(MegaScryptParser.RightParenthesis); }
		public ITerminalNode RightParenthesis(int i) {
			return GetToken(MegaScryptParser.RightParenthesis, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(T__4);
			State = 123; Match(LeftParenthesis);
			State = 124; expression(0);
			State = 125; Match(RightParenthesis);
			State = 126; block();
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 127; Match(T__5);
					State = 128; Match(LeftParenthesis);
					State = 129; expression(0);
					State = 130; Match(RightParenthesis);
					State = 131; block();
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 138; elseStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode DoublePlus() { return GetToken(MegaScryptParser.DoublePlus, 0); }
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 26, RULE_increment);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; Match(Id);
				State = 142; Match(DoublePlus);
				}
				break;
			case DoublePlus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; Match(DoublePlus);
				State = 144; Match(Id);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode DoubleMinus() { return GetToken(MegaScryptParser.DoubleMinus, 0); }
		public DecrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementContext decrement() {
		DecrementContext _localctx = new DecrementContext(Context, State);
		EnterRule(_localctx, 28, RULE_decrement);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(Id);
				State = 148; Match(DoubleMinus);
				}
				break;
			case DoubleMinus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(DoubleMinus);
				State = 150; Match(Id);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(MegaScryptParser.Number, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode True() { return GetToken(MegaScryptParser.True, 0); }
		public ITerminalNode False() { return GetToken(MegaScryptParser.False, 0); }
		public ITerminalNode Null() { return GetToken(MegaScryptParser.Null, 0); }
		public ITerminalNode String() { return GetToken(MegaScryptParser.String, 0); }
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(MegaScryptParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(MegaScryptParser.RightParenthesis, 0); }
		public ITerminalNode Minus() { return GetToken(MegaScryptParser.Minus, 0); }
		public ITerminalNode Exclamation() { return GetToken(MegaScryptParser.Exclamation, 0); }
		public ITerminalNode Multiply() { return GetToken(MegaScryptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(MegaScryptParser.Divide, 0); }
		public ITerminalNode Mod() { return GetToken(MegaScryptParser.Mod, 0); }
		public ITerminalNode Plus() { return GetToken(MegaScryptParser.Plus, 0); }
		public ITerminalNode Smaller() { return GetToken(MegaScryptParser.Smaller, 0); }
		public ITerminalNode Greater() { return GetToken(MegaScryptParser.Greater, 0); }
		public ITerminalNode SmallerEql() { return GetToken(MegaScryptParser.SmallerEql, 0); }
		public ITerminalNode GreaterEql() { return GetToken(MegaScryptParser.GreaterEql, 0); }
		public ITerminalNode DoubleEquals() { return GetToken(MegaScryptParser.DoubleEquals, 0); }
		public ITerminalNode NotEquals() { return GetToken(MegaScryptParser.NotEquals, 0); }
		public ITerminalNode DoubleAmp() { return GetToken(MegaScryptParser.DoubleAmp, 0); }
		public ITerminalNode DoubleVertical() { return GetToken(MegaScryptParser.DoubleVertical, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 154; Match(Number);
				}
				break;
			case 2:
				{
				State = 155; Match(Id);
				}
				break;
			case 3:
				{
				State = 156; Match(True);
				}
				break;
			case 4:
				{
				State = 157; Match(False);
				}
				break;
			case 5:
				{
				State = 158; Match(Null);
				}
				break;
			case 6:
				{
				State = 159; Match(String);
				}
				break;
			case 7:
				{
				State = 160; invocation();
				State = 161; Match(LeftParenthesis);
				State = 162; expression(0);
				State = 163; Match(RightParenthesis);
				}
				break;
			case 8:
				{
				State = 165; Match(Minus);
				State = 166; expression(8);
				}
				break;
			case 9:
				{
				State = 167; Match(Exclamation);
				State = 168; expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 189;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 172;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Mod))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 173; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 175;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 176; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 178;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Smaller) | (1L << Greater) | (1L << SmallerEql) | (1L << GreaterEql))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 179; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 181;
						_la = TokenStream.LA(1);
						if ( !(_la==DoubleEquals || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 182; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 184; Match(DoubleAmp);
						State = 185; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 187; Match(DoubleVertical);
						State = 188; expression(2);
						}
						break;
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\xC5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '%', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '(', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x30', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x35', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '<', '\n', '\x4', '\x5', 
		'\x4', '>', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'I', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'P', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'S', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '^', '\n', '\t', '\f', '\t', '\xE', '\t', '\x61', '\v', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', 'j', '\n', '\v', '\f', '\v', '\xE', 
		'\v', 'm', '\v', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', 'q', '\n', 
		'\f', '\f', '\f', '\xE', '\f', 't', '\v', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', 'x', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\x88', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x8B', 
		'\v', '\xE', '\x3', '\xE', '\x5', '\xE', '\x8E', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x94', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x9A', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xAC', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xC0', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC3', '\v', '\x11', '\x3', 
		'\x11', '\x2', '\x3', ' ', '\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\x2', '\a', '\x4', '\x2', '\r', '\r', '$', '\'', '\x3', '\x2', '\x11', 
		'\x13', '\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '\x1A', '\x1D', '\x3', 
		'\x2', ' ', '!', '\x2', '\xD7', '\x2', '&', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x34', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'L', '\x3', '\x2', '\x2', '\x2', '\xE', 'T', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'Z', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x14', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'w', '\x3', '\x2', '\x2', '\x2', '\x18', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '|', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x99', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xAB', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x5', '\x4', '\x3', 
		'\x2', '#', '%', '\x5', '\x16', '\f', '\x2', '$', '\"', '\x3', '\x2', 
		'\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', 
		'\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', '&', 
		'\x3', '\x2', '\x2', '\x2', ')', '\x30', '\x5', '\x6', '\x4', '\x2', '*', 
		'\x30', '\x5', '\b', '\x5', '\x2', '+', '\x30', '\x5', '\x1C', '\xF', 
		'\x2', ',', '\x30', '\x5', '\x1E', '\x10', '\x2', '-', '\x30', '\x5', 
		'\xE', '\b', '\x2', '.', '\x30', '\x5', '\n', '\x6', '\x2', '/', ')', 
		'\x3', '\x2', '\x2', '\x2', '/', '*', '\x3', '\x2', '\x2', '\x2', '/', 
		'+', '\x3', '\x2', '\x2', '\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', 
		'/', '-', '\x3', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x3', 
		'\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', 
		'\x5', '\x1A', '\xE', '\x2', '\x34', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\f', '\x2', '\x2', '\x37', '=', '\a', 
		'(', '\x2', '\x2', '\x38', ';', '\a', '\r', '\x2', '\x2', '\x39', '<', 
		'\x5', ' ', '\x11', '\x2', ':', '<', '\x5', '\x14', '\v', '\x2', ';', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '>', '\x3', '\x2', '\x2', '\x2', '=', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\a', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\a', '(', '\x2', '\x2', '@', '\x43', '\t', '\x2', 
		'\x2', '\x2', '\x41', '\x44', '\x5', '\x14', '\v', '\x2', '\x42', '\x44', 
		'\x5', ' ', '\x11', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\a', '(', '\x2', '\x2', '\x46', 'H', '\a', 
		'\x14', '\x2', '\x2', 'G', 'I', '\x5', '\f', '\a', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '\x15', '\x2', '\x2', 'K', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'Q', '\x5', ' ', '\x11', '\x2', 'M', 
		'N', '\a', '\x17', '\x2', '\x2', 'N', 'P', '\x5', ' ', '\x11', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', '\r', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\f', '\x2', '\x2', 'U', 'V', '\a', '(', '\x2', 
		'\x2', 'V', 'W', '\a', '\x4', '\x2', '\x2', 'W', 'X', '\x5', '\x10', '\t', 
		'\x2', 'X', 'Y', '\a', '\x5', '\x2', '\x2', 'Y', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '_', '\x5', '\x12', '\n', '\x2', '[', '\\', '\a', '\x17', 
		'\x2', '\x2', '\\', '^', '\x5', '\x12', '\n', '\x2', ']', '[', '\x3', 
		'\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\a', '(', '\x2', '\x2', '\x63', '\x64', '\a', 
		'\x19', '\x2', '\x2', '\x64', '\x65', '\x5', ' ', '\x11', '\x2', '\x65', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x66', 'k', '\a', '(', '\x2', '\x2', 
		'g', 'h', '\a', '\x16', '\x2', '\x2', 'h', 'j', '\a', '(', '\x2', '\x2', 
		'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x15', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'r', '\a', '\x4', '\x2', '\x2', 'o', 'q', '\x5', '\x4', '\x3', 
		'\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', 
		'\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'x', '\a', '\x5', '\x2', '\x2', 'v', 'x', '\x5', '\x4', '\x3', 
		'\x2', 'w', 'n', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x17', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\x6', 
		'\x2', '\x2', 'z', '{', '\x5', '\x16', '\f', '\x2', '{', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\a', '\a', '\x2', '\x2', '}', '~', '\a', 
		'\x14', '\x2', '\x2', '~', '\x7F', '\x5', ' ', '\x11', '\x2', '\x7F', 
		'\x80', '\a', '\x15', '\x2', '\x2', '\x80', '\x89', '\x5', '\x16', '\f', 
		'\x2', '\x81', '\x82', '\a', '\b', '\x2', '\x2', '\x82', '\x83', '\a', 
		'\x14', '\x2', '\x2', '\x83', '\x84', '\x5', ' ', '\x11', '\x2', '\x84', 
		'\x85', '\a', '\x15', '\x2', '\x2', '\x85', '\x86', '\x5', '\x16', '\f', 
		'\x2', '\x86', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\x18', '\r', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', 
		'(', '\x2', '\x2', '\x90', '\x94', '\a', '\"', '\x2', '\x2', '\x91', '\x92', 
		'\a', '\"', '\x2', '\x2', '\x92', '\x94', '\a', '(', '\x2', '\x2', '\x93', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'(', '\x2', '\x2', '\x96', '\x9A', '\a', '#', '\x2', '\x2', '\x97', '\x98', 
		'\a', '#', '\x2', '\x2', '\x98', '\x9A', '\a', '(', '\x2', '\x2', '\x99', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\b', 
		'\x11', '\x1', '\x2', '\x9C', '\xAC', '\a', ')', '\x2', '\x2', '\x9D', 
		'\xAC', '\a', '(', '\x2', '\x2', '\x9E', '\xAC', '\a', '\t', '\x2', '\x2', 
		'\x9F', '\xAC', '\a', '\n', '\x2', '\x2', '\xA0', '\xAC', '\a', '\v', 
		'\x2', '\x2', '\xA1', '\xAC', '\a', '*', '\x2', '\x2', '\xA2', '\xA3', 
		'\x5', '\n', '\x6', '\x2', '\xA3', '\xA4', '\a', '\x14', '\x2', '\x2', 
		'\xA4', '\xA5', '\x5', ' ', '\x11', '\x2', '\xA5', '\xA6', '\a', '\x15', 
		'\x2', '\x2', '\xA6', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', 
		'\a', '\x10', '\x2', '\x2', '\xA8', '\xAC', '\x5', ' ', '\x11', '\n', 
		'\xA9', '\xAA', '\a', '\x18', '\x2', '\x2', '\xAA', '\xAC', '\x5', ' ', 
		'\x11', '\t', '\xAB', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xAE', '\f', '\b', '\x2', '\x2', '\xAE', '\xAF', 
		'\t', '\x3', '\x2', '\x2', '\xAF', '\xC0', '\x5', ' ', '\x11', '\t', '\xB0', 
		'\xB1', '\f', '\a', '\x2', '\x2', '\xB1', '\xB2', '\t', '\x4', '\x2', 
		'\x2', '\xB2', '\xC0', '\x5', ' ', '\x11', '\b', '\xB3', '\xB4', '\f', 
		'\x6', '\x2', '\x2', '\xB4', '\xB5', '\t', '\x5', '\x2', '\x2', '\xB5', 
		'\xC0', '\x5', ' ', '\x11', '\a', '\xB6', '\xB7', '\f', '\x5', '\x2', 
		'\x2', '\xB7', '\xB8', '\t', '\x6', '\x2', '\x2', '\xB8', '\xC0', '\x5', 
		' ', '\x11', '\x6', '\xB9', '\xBA', '\f', '\x4', '\x2', '\x2', '\xBA', 
		'\xBB', '\a', '\x1E', '\x2', '\x2', '\xBB', '\xC0', '\x5', ' ', '\x11', 
		'\x5', '\xBC', '\xBD', '\f', '\x3', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'\x1F', '\x2', '\x2', '\xBE', '\xC0', '\x5', ' ', '\x11', '\x4', '\xBF', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '!', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x16', '$', '&', '/', '\x34', ';', 
		'=', '\x43', 'H', 'Q', '_', 'k', 'r', 'w', '\x89', '\x8D', '\x93', '\x99', 
		'\xAB', '\xBF', '\xC1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
